/** @file xr-client.h
 *
 * XML-RPC Client Connection API
 *
 * This API can be used to implement XML-RPC clients.
 *
 * Then basically you just create (@ref xr_client_new) connection object
 * (@ref xr_client_conn) and open connection to given URI
 * (@ref xr_client_open). Now you are free to perform XML-RPC calls
 * using code generated by @ref xdlc.
 */

#ifndef __XR_CLIENT_H__
#define __XR_CLIENT_H__

#include "xr-call.h"

GQuark xr_client_error_quark();
#define XR_CLIENT_ERROR xr_client_error_quark()

typedef enum
{
  XR_CLIENT_ERROR_MARCHALIZER,
  XR_CLIENT_ERROR_CLOSED,
  XR_CLIENT_ERROR_CONNECT,
  XR_CLIENT_ERROR_IO,
  XR_CLIENT_ERROR_FAILED
} XRClientError;

/** Opaque data structrure that represents client connection.
 */
typedef struct _xr_client_conn xr_client_conn;

/** Create new connection object.
 *
 * @return New connection object.
 */
xr_client_conn* xr_client_new(GError** err);

/** Free connection object. This function calls @ref xr_client_close if
 * necessary.
 *
 * @param conn Connection object.
 */
void xr_client_free(xr_client_conn* conn);

/** Open new connection to the server.
 *
 * @param conn Connection object.
 * @param uri URI of the cleint (http[s]://host[:port]/Servlet).
 *
 * @return Function returns -1 on failure and 0 on success.
 */
int xr_client_open(xr_client_conn* conn, char* uri, GError** err);

/** Close currently open connection.
 *
 * @param conn Connection object.
 */
void xr_client_close(xr_client_conn* conn);

/** Perform XML-RPC call over connection.
 *
 * @param conn Connection object.
 * @param call Call object.
 *
 * @return Function returns -1 on fatal error, 0 on success and 1 on
 *   XML-RPC error. Error code and message can be retrieved using
 *   @ref xr_client_get_error_code and @ref xr_client_get_error_message
 *   functions.
 *
 * @warning You must reset error if it occured or your program will
 *   abort on next call to this function.
 */
int xr_client_call(xr_client_conn* conn, xr_call* call, GError** err);

#endif
