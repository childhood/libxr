namespace T;

error ERR1;
error ERR2;

struct Struct
{
    string      v_string;
}

struct AllArrays
{
    array<string>      a_string;
    array<time>        a_time;
//    array<blob>        a_blob;
    array<int>         a_int;
    array<boolean>     a_boolean;
//    array<double>      a_double;
//    array<any>         a_any;
    array<Struct>      a_struct;
    array<array<string>> aa_string;
    array<array<array<string>>> aaa_string;
}

struct AllTypes
{
    string      v_string;
    time        v_time;
//    blob        v_blob;
    int         v_int;
    boolean     v_boolean;
    double      v_double;
//    any         v_any;
    Struct      v_struct;
    AllArrays   v_arrays;
}

servlet Test1
{
<%
#include <stdio.h>
%>

    AllTypes getAll()
    <%
        printf("getAll()\n");
        retval = TAllTypes_new();
        retval->v_string = g_strdup("Hi!");
        retval->v_time = g_strdup("2006-04-04");
//        retval->v_blob = xr_blob_new(g_strdup("Hi all!"), strlen("Hi all!"));
        retval->v_int = 5645;
        retval->v_boolean = FALSE;
        retval->v_double = 123.123e-3;
        retval->v_struct = TStruct_new();
        retval->v_struct->v_string = g_strdup("some str");
        retval->v_arrays = TAllArrays_new();
    %>
    
    /** Get user data.
     *
     * @param name Name of the user.
     * @return User struct.
     */
    boolean setAll(AllTypes all)
    <%
        printf("setAll()\n");
    %>

    __attrs__
    <%
        char* username;
    %>
    
    __init__
    <%
        printf("Init!\n");
    %>

    __fini__
    <%
        printf("Fini!\n");
    %>

    __pre_call__
    <%
        printf("Pre-call!\n");
    %>

    __post_call__
    <%
        printf("Post-call!\n");
    %>
}
