/* 
 * Copyright 2006, 2007 Ondrej Jirman <ondrej.jirman@zonio.net>
 * 
 * This file is part of libxr.
 *
 * Libxr is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * Libxr is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with libxr.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace T;

error ERR1 = 1;
error ERR2 = 2;

struct Struct
{
    string      v_string;
}

struct AllArrays
{
    array<string>      a_string;
    array<time>        a_time;
    array<blob>        a_blob;
    array<int>         a_int;
    array<boolean>     a_boolean;
    array<double>      a_double;
    array<any>         a_any;
    array<Struct>      a_struct;
    array<array<string>> aa_string;
    array<array<array<string>>> aaa_string;
}

struct AllTypes
{
    string      v_string;
    time        v_time;
    blob        v_blob;
    int         v_int;
    boolean     v_boolean;
    double      v_double;
    any         v_any;
    Struct      v_struct;
    AllArrays   v_arrays;
}

servlet Test1
{
  <%
#include <stdio.h>
#include <string.h>
  %>

  error NOTHING = 2;
  error NO_DATA = 5;

  AllTypes getAll()
  <%
    printf("getAll()\n");
    retval = TAllTypes_new();
    retval->v_string = g_strdup("Hi!");
    retval->v_time = g_strdup("2006-04-04");
    retval->v_blob = xr_blob_new(g_strdup("Hi all!"), strlen("Hi all!"));
    retval->v_int = 5645;
    retval->v_boolean = FALSE;
    retval->v_double = 123.123e-3;
    retval->v_any = xr_value_string_new("test");
    retval->v_struct = TStruct_new();
    retval->v_struct->v_string = g_strdup("some str");
    retval->v_arrays = TAllArrays_new();

    /* test copy/free */
    TAllTypes* orig = retval;
    retval = TAllTypes_copy(retval);
    TAllTypes_free(orig);
  %>

  AllArrays getAllArrays()
  <%
    int i;

#define ADD(a, val) retval->a = g_slist_append(retval->a, val)

    printf("getAllArrays()\n");

    retval = TAllArrays_new();

    retval->a_string = Array_string_new();
    for (i = 0; i < 5; i++)
      Array_string_add(retval->a_string, g_strdup_printf("str%d", i));
    Array_string_add(retval->a_string, g_strdup("&#10;test<\xc4\x8d\xc5\x99\xc5\xa1"));

    retval->a_time = Array_time_new();
    for (i = 1; i < 10; i++)
      Array_time_add(retval->a_time, g_strdup_printf("2006-04-%02d", i));

    retval->a_blob = Array_blob_new();
    for (i = 0; i < 2; i++)
      Array_blob_add(retval->a_blob, xr_blob_new(g_strdup_printf("BBBBBBBBBBBBBBBBBLOOOOOB%d", i), -1));

    retval->a_int = Array_int_new();
    for (i = 0; i < 10; i++)
      Array_int_add(retval->a_int, i);

    retval->a_boolean = Array_boolean_new();
    for (i = 0; i < 10; i++)
      Array_boolean_add(retval->a_boolean, g_random_boolean());

    retval->a_double = Array_double_new();
    for (i = 0; i < 5; i++)
      Array_double_add(retval->a_double, i * 1.11e-3);

    retval->a_any = Array_any_new();
    for (i = 0; i < 10; i++)
      if (g_random_boolean())
      {
        char* val = g_strdup_printf("%d", i);
        Array_any_add(retval->a_any, xr_value_string_new(val));
        g_free(val);
      }
      else
        Array_any_add(retval->a_any, xr_value_int_new(i));

    retval->a_struct = Array_TStruct_new();
    for (i = 0; i < 2; i++)
    {
      TStruct* s = TStruct_new();
      s->v_string = g_strdup_printf("struct val %d", i);
      Array_TStruct_add(retval->a_struct, s);
    }

    retval->aa_string = Array_Array_string_new();
    for (i = 0; i < 2; i++)
    {
      GArray* a = Array_string_new();
      int j;

      for (j = 0; j < 10; j++)
        Array_string_add(a, g_strdup_printf("[%d %d]", i, j));

      Array_Array_string_add(retval->aa_string, a);
    }

    retval->aaa_string = Array_Array_Array_string_new();
    for (i = 0; i < 2; i++)
    {
      GArray* a = Array_Array_string_new();
      int j;

      for (j = 0; j < 10; j++)
      {
        GArray* b = Array_string_new();
        int k;

        for (k = 0; k < 3; k++)
          Array_string_add(b, g_strdup_printf("[%d %d %d]", i, j, k));

        Array_Array_string_add(a, b);
      }

      Array_Array_Array_string_add(retval->aaa_string, a);
    }

#undef ADD

    /* test copy/free */
    TAllArrays* orig = retval;
    retval = TAllArrays_copy(retval);
    TAllArrays_free(orig);
  %>
  
  boolean setAll(AllTypes all)
  <%
    printf("setAll()\n");
  %>

  array<string> getBigArray()
  <%
    int i;

    retval = Array_string_new();
    for (i = 0; i < 5000; i++)
      Array_string_add(retval, g_strdup_printf("user.bob%d@zonio.net", i));
  %>

  boolean putBigArray(take array<string> arr)
  <%
    int i;

//    for (i = 0; i < arr->len; i++)
//      g_print("n: %s\n", Array_string_get(arr, i));

    Array_string_free(arr);
  %>

  __attrs__
  <%
    char* username;
  %>
  
  __init__
  <%
    printf("Init!\n");
  %>

  __fini__
  <%
    printf("Fini!\n");
  %>

  __pre_call__
  <%
    //printf("Pre-call!\n");
  %>

  __post_call__
  <%
    //printf("Post-call!\n");
  %>

  __fallback__
  <%
    printf("Unknown method called %s!\n", xr_call_get_method(_call));
    xr_call_set_retval(_call, xr_value_bool_new(TRUE));
    return TRUE;
  %>

  /* serve GET request, if serverd return TRUE, otherwise return FALSE */
  __download__
  <%
    const char* path = xr_http_get_resource(_http);
    char* username;
    char* password;

    if (!xr_http_get_basic_auth(_http, &username, &password))
    {
      xr_http_setup_response(_http, 401);
      xr_http_set_header(_http, "Content-Type", "text/plain");
      xr_http_set_header(_http, "WWW-Authenticate", "Basic realm=\"Libxr Testsuite\"");
      xr_http_write_all(_http, "Authentication Required", -1, NULL);
      return TRUE;
    }

    g_print("Authorized: '%s' '%s'\n", username, password);
    g_free(username);
    g_free(password);

    if (1)
    {
      xr_http_setup_response(_http, 200);
      xr_http_set_header(_http, "Content-Type", "text/plain");
      xr_http_write_all(_http, "Crap\n", -1, NULL);
      return TRUE;
    }
    else
    {
      GString* response = g_string_sized_new(100);
      g_string_append_printf(response, "<html><head><title>401 Not Authorized</title></head><body><h1>401 Not Authorized</h1><p>You are not authorized to download %s</p></body></html>", path);

      xr_http_setup_response(_http, 401);
      xr_http_set_header(_http, "Content-Type", "text/html");
      xr_http_write_all(_http, response->str, response->len, NULL);

      g_string_free(response, TRUE);
      return TRUE;
    }
  %>

  __upload__
  <%
    char buf[4096];
    gssize read_bytes;
    const char* path = xr_http_get_resource(_http);
    char* username;
    char* password;

    if (!xr_http_get_basic_auth(_http, &username, &password))
    {
      xr_http_setup_response(_http, 401);
      xr_http_set_header(_http, "Content-Type", "text/plain");
      xr_http_set_header(_http, "WWW-Authenticate", "Basic realm=\"Libxr Testsuite\"");
      xr_http_write_all(_http, "Authentication Required", -1, NULL);
      return TRUE;
    }

    g_print("Authorized: '%s' '%s'\n", username, password);
    g_free(username);
    g_free(password);

    //GString* data = xr_http_read_all(_http, NULL);
    while ((read_bytes = xr_http_read(_http, buf, 4096, NULL)) > 0)
    {
      //g_print("\n\nup: read = %d\n\n\n", read_bytes);
    }

    xr_http_setup_response(_http, 200);
    xr_http_set_header(_http, "Content-Type", "text/plain");
    xr_http_write_all(_http, "Crap\n", -1, NULL);
    return TRUE;
  %>
}

servlet Test2
{
  <%
#include <stdio.h>
#include <string.h>
  %>

  __attrs__
  <%
    char* username;
    char* password;
  %>
  
  __init__
  <%
    printf("Init AUTH Servlet!\n");
    printf("Accepted connection from: %s\n", xr_servlet_get_client_ip(_servlet));
  %>

  __fini__
  <%
    printf("Fini AUTH Servlet!\n");
  %>

  boolean auth(take string name, take string password)
  <%
    printf("AUTH-PRE:  %s, %s\n", _priv->username, _priv->password);
    _priv->username = name;
    _priv->password = password;
    printf("AUTH-POST: %s, %s\n", _priv->username, _priv->password);
  %>

  string getUsername()
  <%
    return g_strdup(_priv->username);
  %>
}
