namespace ZM; // Zblok Management

error AUTH_FAILED = 1;
error NOT_AUTHORIZED = 2;

struct User
{
  string  username;
  string  realname;
  int     mail_usage;
}

struct Folder
{
  string  name;
  string  type;
  int     size;
}

struct SystemStatus
{
  int            uptime;
  array<User>    users;
  array<Folder>  folders;
}

servlet Server
{
  // Some code you want to get included at the top of servlet subs file.
  <%
#include <string.h>
  %>

  // Servlet variables (This code is inserted into struct definition. You can
  // access these variables using _priv pointer, see below for example)
  __attrs__
  <%
    int auth_ok;     // True if client is authenticated
    char* username;  // Contains username of the client (when authenticated)
    char* password;  // Contains user's password (when authenticated)
  %>

  // This is called before first RPC call.
  __init__
  <%
    _priv->password = g_strdup("qwe");
  %>
    
  // Called when client disconnects.
  __fini__
  <%
    g_free(_priv->username);
    g_free(_priv->password);
  %>

  // Called before RPC is processed using methods defined below. You may do some
  // common call processing here (authentication check, locking, etc.) Return TRUE
  // if you want to inhibit actual RPC call.
  __pre_call__
  <%
    char* method = xr_call_get_method(_call);
    if (strcmp(method, "auth"))
    {
      if (!_priv->auth_ok)
      {
        char* msg = g_strdup_printf("Method %s requires authentication. (call auth please).", method);
        xr_call_set_error(_call, ZM_XMLRPC_ERROR_NOT_AUTHORIZED, msg);
        g_free(msg);
        return FALSE;
      }
    }
    return TRUE;
  %>

  // Called after each call is processed and before server sends response to the
  // client.
  __post_call__
  <%
    xr_call_dump(_call, 0);
  %>
   
  boolean auth(string username, string password)
  <%
    if (!strcmp(username, "bob") && !strcmp(password, _priv->password))
    {
      _priv->username = g_strdup(username);
      _priv->auth_ok = TRUE;
      return TRUE;
    }
    g_set_error(_error, 0, ZM_XMLRPC_ERROR_AUTH_FAILED, "Auth failed!");
  %>

  SystemStatus getSystemStatus()
  <%
    ZMUser *user;
    ZMFolder *folder;
    // create SystemStatus object
    retval = ZMSystemStatus_new();
    // create User object for bob
    user = ZMUser_new();
    user->username = g_strdup("bob");
    user->realname = g_strdup("Bobby");
    user->mail_usage = 20;
    retval->users = g_slist_append(retval->users, user);
    // create Folder object
    folder = ZMFolder_new();
    folder->name = g_strdup("data");
    folder->type = g_strdup("shared");
    folder->size = 1024*45;
    retval->folders = g_slist_append(retval->folders, folder);
  %>

  boolean changeUserPassword(string newpassword)
  <%
    if (strlen(newpassword) <= 5)
    {
      g_set_error(_error, 0, ZM_XMLRPC_ERROR_NOT_AUTHORIZED, 
        "Password is too short!");
      return FALSE;
    }
    g_free(_priv->password);
    _priv->password = g_strdup(newpassword);
    return TRUE;
  %>
}
